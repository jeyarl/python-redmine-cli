#!/usr/bin/env python
# coding:utf-8
from redminelib import Redmine
from optparse import OptionParser
from colorama import init, Fore, Back, Style
import toml
import re
import datetime
import os


# to support easy colours
colours = {
        "%K" : Fore.BLACK,
        "%R" : Fore.RED,
        "%G" : Fore.GREEN,
        "%Y" : Fore.YELLOW,
        "%B" : Fore.BLUE,
        "%M" : Fore.MAGENTA,
        "%C" : Fore.CYAN,
        "%W" : Fore.WHITE,
        "%S" : Fore.RESET,

        "%k" : Back.BLACK,
        "%r" : Back.RED,
        "%g" : Back.GREEN,
        "%y" : Back.YELLOW,
        "%b" : Back.BLUE,
        "%m" : Back.MAGENTA,
        "%c" : Back.CYAN,
        "%w" : Back.WHITE,
        "%s" : Back.RESET,

        "%d" : Style.DIM,
        "%n" : Style.NORMAL,
        "%i" : Style.BRIGHT,
        "%a" : Style.RESET_ALL
        }

colours_rep = dict((re.escape(k), v) for k, v in colours.items())
colours_pattern = re.compile("|".join(colours_rep.keys()))

### Instead of using simple string, use this to support easy colours CS("%RThis is red text,%Bblue and %Yyellow.").print()
class CS(str): # coloured string
    # format text
    def fmt(self, *args):
        return (colours_pattern.sub(lambda m: colours_rep[re.escape(m.group(0))], self).format(*args))
    # print text and format it in one go
    def print_it(self, *args):
        print(self.fmt(*args))


def get_week_day (dt):
        wdays = ["Mo","Tu","We","Th","Fr","Sa","Su"]
        return wdays[dt.weekday()]

def get_days_ago (dt):
    delta = datetime.date.today() - dt
    return delta.days

# make colorama reset all changes back to standard console colours on exit
init(autoreset = True)

usage = "usage: %prog [options] hours comment"
version = "1.0.1.0"


version_text = "%prog {}".format(version)
opt = OptionParser(usage = usage, version = version_text)
opt.add_option("-a","--activity",
                dest="activity",
                help="activity in the time entry")
opt.add_option("-i","--issue",
                dest="issue",
                help="issue to work on")
opt.add_option("-p","--project",
                dest="project",
                help="project to work on")
opt.add_option("","--activities",
                action="store_true", dest="show_activities", default=False,
                help="no adding of time, but show current time entries in the issue")
opt.add_option("","--times",
                action="store_true", dest="times", default=False,
                help="no adding of time, but show current time entries in the issue")
opt.add_option("","--issues",
                action="store_true", dest="issues", default=False,
                help="no adding of time, but show all issues assigned to me")
opt.add_option("-d","--days-ago",
                action="store", dest="days_ago", default=0,
                help="time spend on, relative to today by days ago (0 is today, 1 yesterday)")
opt.add_option("-w","--weeks-ago",
                action="store", dest="weeks_ago", default=0,
                help="time spend on, relative to today by weeks ago (0 is today, 1 is 7 days ago)")

opt.add_option("-c","--checkin",
                action="store_true", dest="checkin", default=False,
                help="actually checkin the new log time in to the server")

(options, args) = opt.parse_args()

config_file = os.path.join(os.path.expanduser("~"), ".redmrc")


# read configuration from this file
with open(config_file) as confile:
    config = toml.loads(confile.read())

CS("%YRedmine time checkin app").print_it()

CS("Host: %G{}").print_it(config["login"]["url"])


redmine = Redmine(config["login"]["url"], key=config["login"]["key"])


if options.issues:
    issues = redmine.issue.filter( assigned_to_id = "me")
    CS("All issues assigned to you").print_it()
    for i in issues:
        CS("#%W{} [%W{}] %a- %G{}").print_it(i.id, i.project ,i.subject.encode('utf-8'))
    exit()

if options.issue != None:
    issue_id = int(options.issue)

if 'issue_id' in locals():
    print(issue_id)
else:
    if options.project != None:
        project_name = options.project.decode('utf-8')
    else:
        project_name = config["task"]["project"]

    projects = redmine.project.all()
    
    for prj in projects:
        if prj.name == project_name:
            print("%d: %s" % (prj.id, prj.name))
            project_id = prj.id
    if 'project_id' not in locals():
        print("project name error")
        exit(2)

###  Reporting TIMES ###

if options.times:
    times_sum = 0

    if options.issue != None:
        if 'issue_id' not in locals():
            print("set issues id")
            exit(2)
        try:
            task = redmine.issue.get(issue_id)
        except:
            print("no such issue")
            exit(2)


        CS("Time entries in: %G{}").print_it(task)
        print (Fore.RESET+"--------------------------------------------------------")
    
        for te in task.time_entries:
            if hasattr(te, 'activity'):
                CS("\t%C{} days ago: %C{}(%R{}%C)%B {} %R{}\t%a- %G{}").print_it(get_days_ago(te.spent_on), te.spent_on, get_week_day(te.spent_on), te.activity, te.hours,te.comments.encode('utf-8'))
                times_sum += te.hours
            else:
                CS("\t%C{} days ago: %C{}(%R{}%C) %R{}\t%a- %G{}").print_it(get_days_ago(te.spent_on), te.spent_on, get_week_day(te.spent_on), te.hours, te.comments.encode('utf-8'))
                times_sum += te.hours
    
        if times_sum > 0:
            print (Fore.RESET+"--------------------------------------------------------")
            CS("\tTotal:\t%W{}").print_it(str(datetime.timedelta(hours=times_sum)))
    
        exit()

    elif options.project != None:
        project = redmine.project.get(project_id)
        CS("Time entries in: %G{}").print_it(project)
        print (Fore.RESET+"--------------------------------------------------------")

        for te in project.time_entries:
            if hasattr(te, 'activity'):
                CS("\t%C{} days ago: %C{}(%R{}%C)%B {} %R{}\t%a- %G{}").print_it(get_days_ago(te.spent_on), te.spent_on, get_week_day(te.spent_on), te.activity, te.hours,te.comments.encode('utf-8'))
                times_sum += te.hours
            else:
                CS("\t%C{} days ago: %C{}(%R{}%C) %R{}\t%a- %G{}").print_it(get_days_ago(te.spent_on), te.spent_on, get_week_day(te.spent_on), te.hours, te.comments.encode('utf-8'))
                times_sum += te.hours
    
        if times_sum > 0:
            print (Fore.RESET+"--------------------------------------------------------")
            CS("\tTotal:\t%W{}").print_it(str(datetime.timedelta(hours=times_sum)))
    
        exit()

enums = redmine.enumeration.filter(resource="time_entry_activities")

if options.show_activities:
    for i,e in enumerate(enums):
        CS("{:2} - {}").print_it(i,e)
    exit()


if len(args) == 0:
    CS("%RIncorrect number of arguments. --help to learn.").print_it()
    exit()
elif len(args) == 1:
    descr = ""


days_ago = int(options.days_ago) + int(options.weeks_ago) * 7
spent_on = datetime.date.today() - datetime.timedelta(days = days_ago)
activity = config["task"]["activity"]

if 'issue_id' in locals():
    task = redmine.issue.get(issue_id)
    CS("Addidng time for task: %G{}").print_it(task)

activities = {
    "Research" : 0,
    "Testing" : 5,
    "Meeting" : 6,
    "Development" : 7,
    "Research" : 8,
    "Debug" : 9,
    "Admin" : 10,
    "Deployment" : 11,
}

if options.activity != None:
    for i,e in enumerate(enums):
        if options.activity.lower() in str(e).lower():
            activity = activities[str(e)]
            CS("Activity is: %G{} %a({})").print_it(e,activity)
            break
else:
    # just to inform what is the supposed to be activity
    for e,i in activities.items():
        if i == activity:
            CS("Activity is: %G{} %a({})").print_it(e,activity)


CS("Spend on is: %G{} %a(%R{}%a) %G{}").print_it(spent_on, get_days_ago(spent_on), get_week_day(spent_on))

try:
    hours = float(args[0])
except ValueError:
    print("ValueError")
    exit(2)

CS("Hours = %G{}").print_it(hours)
descr = " ".join(args[1:])
CS("Description = %G{}").print_it(descr)

if options.checkin:
    CS("%i%RCheckin the time entry to the server").print_it()
    if 'issue_id' in locals():
        entry = redmine.time_entry.create(issue_id = issue_id, hours = hours, activity_id = activity, comments = descr, spent_on = spent_on)
    else:
        entry = redmine.time_entry.create(project_id = project_id, hours = hours, activity_id = activity, comments = descr, spent_on = spent_on)
    if entry != None :
        CS("Entry added = %G{}").print_it(entry)
    else:
        CS("%rFailed to add entry").print_it()
else:
    CS("%RNo data has been checked-in, use -c or --checkin to write it to the server!").print_it()
